---
- name: Install Docker on Debian Bullseye
  hosts: all
  become: true
  vars:
    swarm_manager_ip: "10.133.7.101:2377"  # Indirizzo IP del nodo manager
    swarm_manager_port: "2377"
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      tags: [apt]

    - name: Install required packages
      apt:
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg2
          - software-properties-common
          - python3-pip
      tags: [apt]

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
      tags: [docker]

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable"
        state: present
      tags: [docker]

    - name: Update apt cache
      apt:
        update_cache: yes
      tags: [apt]

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
      tags: [docker]

    - name: Add current user to the docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      tags: [docker]

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    - name: Initialize Docker Swarm on the manager node
      shell: docker swarm init --advertise-addr {{ swarm_manager_ip }}
      changed_when: false
      #failed_when: "not ('Swarm initialized' in swarm_output.stdout or 'This node joined a swarm' in swarm_output.stdout)"
      when: inventory_hostname == 'manager_machine' 
      tags: [swarm]

    - name: Retrieve Docker Swarm Join Token  
      shell: docker swarm join-token -q manager 
      register: join_id
      when: inventory_hostname == 'manager_machine'
      tags: [join_token]

    - name: Print the join_token
      debug:
        var: join_id.stdout_lines
      tags: [join_token]

    - name: Salvare il valore in un'altra variabile
      set_fact:
        join_token: join_id.stdout
      tags: [join_token]

    - name: Join worker nodes to the Swarm
      shell: docker swarm join --token {{ join_token }} {{ swarm_manager_ip }}
      when: inventory_hostname != 'manager_machine' and not ('This node is already part of a swarm.')
      tags: [swarm_machines_join]

    - name: Install JSondiff
      pip:
        name:
          - jsondiff
          - pyyaml
          - flask
          - flask_cors
        state: present
      #when: inventory_hostname == 'manager_machine'
      tags: [install_pip_packages]




- name: Deploy the stack
  hosts: manager_machine
  become: true
  vars:
    nginx_files_path: "/home/vagrant/webApp"
    manager_home_path: "/home/vagrant"
  tasks:
    - name: Copy the Stack file 
      copy:
        src: /home/c1pp0/Desktop/DockerSwarmCluster/docker-stack.yml
        dest: /home/vagrant/docker-stack.yml
      tags: [distribute_stack]

    - name: Remove the webApp folder
      file:
        path: /home/vagrant/webApp
        state: absent
      tags: [distribute_stack]

    - name: Copy the webApp folder
      copy:
        src: /home/c1pp0/Desktop/DockerSwarmCluster/webApp
        dest: /home/vagrant/
      tags: [distribute_stack]

    - name: Remove the webApp folder
      file:
        path: /nfs_shared/webApp
        state: absent
      tags: [distribute_stack]

    - name: Copy the webApp folder
      copy:
        src: /home/c1pp0/Desktop/DockerSwarmCluster/webApp
        dest: /nfs_shared
      tags: [distribute_stack]

    - name: Remove the server folder
      file:
        path: /home/vagrant/server.py
        state: absent
      tags: [distribute_stack]
    
    - name: Copy the server folder
      copy:
        src: /home/c1pp0/Desktop/DockerSwarmCluster/server.py
        dest: /home/vagrant/
      tags: [distribute_stack]

    - name: Distribute Docker Stack
      docker_stack:
        name: docker-stack
        state: present
        compose:
          - ./docker-stack.yml
      tags: [distribute_stack]


- name: Refresh the stack
  hosts: manager_machine
  become: true
  vars:
    nginx_files_path: "/home/vagrant/webApp"
    manager_home_path: "/home/vagrant"
  tasks:
    - name: Copy the Stack file 
      copy:
        src: /home/c1pp0/Desktop/DockerSwarmCluster/docker-stack.yml
        dest: /home/vagrant/docker-stack.yml
      tags: [refresh_stack]

    - name: Remove the webApp folder
      file:
        path: /home/vagrant/webApp
        state: absent
      tags: [refresh_stack]

    - name: Copy the webApp folder
      copy:
        src: /home/c1pp0/Desktop/DockerSwarmCluster/webApp
        dest: /home/vagrant/
      tags: [refresh_stack]

    - name: Remove the old Service 
      shell: docker service rm docker-stack_nginx
      tags: [refresh_stack]

    - name: Distribute Docker Stack
      docker_stack:
        name: docker-stack
        state: present
        compose:
          - ./docker-stack.yml
      tags: [refresh_stack]


